"""
The Boolean scalar type represents true or false.
"""
scalar Boolean

type Comment implements Node {
  author: User!
  content: String!
  id: ID!
  post: Post!
}

input CreateUserInput {
  age: Int
  email: String!
  name: String!
  organizationId: ID
}

"""
DateTime represents a date and time in ISO 8601 format.
"""
scalar DateTime

"""
The Float scalar type represents signed double-precision fractional values.
"""
scalar Float

"""
The ID scalar type represents a unique identifier, often used to refetch an object or as a key for caching.
"""
scalar ID

"""
The Int scalar type represents non-fractional signed whole numeric values.
"""
scalar Int

type Mutation {
  createUser(input: CreateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  updateUser(id: ID!, input: UpdateUserInput!): User!
}

interface Node {
  id: ID!
}

type Organization implements Node {
  description: String
  id: ID!
  memberCount: Int!
  members: [User!]!
  name: String!
}

type Post implements Node {
  author: User!
  comments: [Comment!]!
  content: String!
  id: ID!
  published: Boolean!
  title: String!
}

type Profile implements Node {
  avatarUrl: String
  bio: String
  id: ID!
  user: User!
}

type Query {
  node(id: ID!): Node
  search(term: String!): [SearchResult!]!
"""
Fetch a user by ID.
"""
  user(id: ID!): User
  users: [User!]!
}

union SearchResult = Organization | Post | User

"""
The String scalar type represents textual data, represented as UTF-8 character sequences.
"""
scalar String

input UpdateUserInput {
  age: Int
  email: String
  isActive: Boolean
  name: String
}

type User implements Node {
  age: Int
  createdAt: DateTime!
  email: String!
  id: ID!
  isActive: Boolean!
  name: String!
  organization: Organization
  posts: [Post!]!
  profile: Profile
  updatedAt: DateTime!
}
