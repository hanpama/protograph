// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: user.proto

package grpcproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_ResolveQueryUser_FullMethodName               = "/simple.UserService/ResolveQueryUser"
	UserService_ResolveQueryUsers_FullMethodName              = "/simple.UserService/ResolveQueryUsers"
	UserService_ResolveQueryNode_FullMethodName               = "/simple.UserService/ResolveQueryNode"
	UserService_ResolveQuerySearch_FullMethodName             = "/simple.UserService/ResolveQuerySearch"
	UserService_ResolveMutationCreateUser_FullMethodName      = "/simple.UserService/ResolveMutationCreateUser"
	UserService_ResolveMutationUpdateUser_FullMethodName      = "/simple.UserService/ResolveMutationUpdateUser"
	UserService_ResolveMutationDeleteUser_FullMethodName      = "/simple.UserService/ResolveMutationDeleteUser"
	UserService_ResolveUserPosts_FullMethodName               = "/simple.UserService/ResolveUserPosts"
	UserService_ResolveOrganizationMemberCount_FullMethodName = "/simple.UserService/ResolveOrganizationMemberCount"
	UserService_ResolveOrganizationMembers_FullMethodName     = "/simple.UserService/ResolveOrganizationMembers"
	UserService_ResolvePostComments_FullMethodName            = "/simple.UserService/ResolvePostComments"
	UserService_BatchLoadUserById_FullMethodName              = "/simple.UserService/BatchLoadUserById"
	UserService_BatchLoadUserByEmail_FullMethodName           = "/simple.UserService/BatchLoadUserByEmail"
	UserService_BatchLoadOrganizationById_FullMethodName      = "/simple.UserService/BatchLoadOrganizationById"
	UserService_BatchLoadPostById_FullMethodName              = "/simple.UserService/BatchLoadPostById"
	UserService_BatchLoadCommentById_FullMethodName           = "/simple.UserService/BatchLoadCommentById"
	UserService_BatchLoadProfileByUserId_FullMethodName       = "/simple.UserService/BatchLoadProfileByUserId"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// Fetch a user by ID.
	ResolveQueryUser(ctx context.Context, in *ResolveQueryUserRequest, opts ...grpc.CallOption) (*ResolveQueryUserResponse, error)
	ResolveQueryUsers(ctx context.Context, in *ResolveQueryUsersRequest, opts ...grpc.CallOption) (*ResolveQueryUsersResponse, error)
	ResolveQueryNode(ctx context.Context, in *ResolveQueryNodeRequest, opts ...grpc.CallOption) (*ResolveQueryNodeResponse, error)
	ResolveQuerySearch(ctx context.Context, in *ResolveQuerySearchRequest, opts ...grpc.CallOption) (*ResolveQuerySearchResponse, error)
	ResolveMutationCreateUser(ctx context.Context, in *ResolveMutationCreateUserRequest, opts ...grpc.CallOption) (*ResolveMutationCreateUserResponse, error)
	ResolveMutationUpdateUser(ctx context.Context, in *ResolveMutationUpdateUserRequest, opts ...grpc.CallOption) (*ResolveMutationUpdateUserResponse, error)
	ResolveMutationDeleteUser(ctx context.Context, in *ResolveMutationDeleteUserRequest, opts ...grpc.CallOption) (*ResolveMutationDeleteUserResponse, error)
	ResolveUserPosts(ctx context.Context, in *ResolveUserPostsRequest, opts ...grpc.CallOption) (*ResolveUserPostsResponse, error)
	ResolveOrganizationMemberCount(ctx context.Context, in *ResolveOrganizationMemberCountRequest, opts ...grpc.CallOption) (*ResolveOrganizationMemberCountResponse, error)
	ResolveOrganizationMembers(ctx context.Context, in *ResolveOrganizationMembersRequest, opts ...grpc.CallOption) (*ResolveOrganizationMembersResponse, error)
	ResolvePostComments(ctx context.Context, in *ResolvePostCommentsRequest, opts ...grpc.CallOption) (*ResolvePostCommentsResponse, error)
	BatchLoadUserById(ctx context.Context, in *BatchLoadUserByIdRequest, opts ...grpc.CallOption) (*BatchLoadUserByIdResponse, error)
	BatchLoadUserByEmail(ctx context.Context, in *BatchLoadUserByEmailRequest, opts ...grpc.CallOption) (*BatchLoadUserByEmailResponse, error)
	BatchLoadOrganizationById(ctx context.Context, in *BatchLoadOrganizationByIdRequest, opts ...grpc.CallOption) (*BatchLoadOrganizationByIdResponse, error)
	BatchLoadPostById(ctx context.Context, in *BatchLoadPostByIdRequest, opts ...grpc.CallOption) (*BatchLoadPostByIdResponse, error)
	BatchLoadCommentById(ctx context.Context, in *BatchLoadCommentByIdRequest, opts ...grpc.CallOption) (*BatchLoadCommentByIdResponse, error)
	BatchLoadProfileByUserId(ctx context.Context, in *BatchLoadProfileByUserIdRequest, opts ...grpc.CallOption) (*BatchLoadProfileByUserIdResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) ResolveQueryUser(ctx context.Context, in *ResolveQueryUserRequest, opts ...grpc.CallOption) (*ResolveQueryUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveQueryUserResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveQueryUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveQueryUsers(ctx context.Context, in *ResolveQueryUsersRequest, opts ...grpc.CallOption) (*ResolveQueryUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveQueryUsersResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveQueryUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveQueryNode(ctx context.Context, in *ResolveQueryNodeRequest, opts ...grpc.CallOption) (*ResolveQueryNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveQueryNodeResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveQueryNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveQuerySearch(ctx context.Context, in *ResolveQuerySearchRequest, opts ...grpc.CallOption) (*ResolveQuerySearchResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveQuerySearchResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveQuerySearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveMutationCreateUser(ctx context.Context, in *ResolveMutationCreateUserRequest, opts ...grpc.CallOption) (*ResolveMutationCreateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveMutationCreateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveMutationCreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveMutationUpdateUser(ctx context.Context, in *ResolveMutationUpdateUserRequest, opts ...grpc.CallOption) (*ResolveMutationUpdateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveMutationUpdateUserResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveMutationUpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveMutationDeleteUser(ctx context.Context, in *ResolveMutationDeleteUserRequest, opts ...grpc.CallOption) (*ResolveMutationDeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveMutationDeleteUserResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveMutationDeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveUserPosts(ctx context.Context, in *ResolveUserPostsRequest, opts ...grpc.CallOption) (*ResolveUserPostsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveUserPostsResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveUserPosts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveOrganizationMemberCount(ctx context.Context, in *ResolveOrganizationMemberCountRequest, opts ...grpc.CallOption) (*ResolveOrganizationMemberCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveOrganizationMemberCountResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveOrganizationMemberCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolveOrganizationMembers(ctx context.Context, in *ResolveOrganizationMembersRequest, opts ...grpc.CallOption) (*ResolveOrganizationMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolveOrganizationMembersResponse)
	err := c.cc.Invoke(ctx, UserService_ResolveOrganizationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ResolvePostComments(ctx context.Context, in *ResolvePostCommentsRequest, opts ...grpc.CallOption) (*ResolvePostCommentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResolvePostCommentsResponse)
	err := c.cc.Invoke(ctx, UserService_ResolvePostComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadUserById(ctx context.Context, in *BatchLoadUserByIdRequest, opts ...grpc.CallOption) (*BatchLoadUserByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadUserByIdResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadUserById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadUserByEmail(ctx context.Context, in *BatchLoadUserByEmailRequest, opts ...grpc.CallOption) (*BatchLoadUserByEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadUserByEmailResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadUserByEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadOrganizationById(ctx context.Context, in *BatchLoadOrganizationByIdRequest, opts ...grpc.CallOption) (*BatchLoadOrganizationByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadOrganizationByIdResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadOrganizationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadPostById(ctx context.Context, in *BatchLoadPostByIdRequest, opts ...grpc.CallOption) (*BatchLoadPostByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadPostByIdResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadPostById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadCommentById(ctx context.Context, in *BatchLoadCommentByIdRequest, opts ...grpc.CallOption) (*BatchLoadCommentByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadCommentByIdResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadCommentById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchLoadProfileByUserId(ctx context.Context, in *BatchLoadProfileByUserIdRequest, opts ...grpc.CallOption) (*BatchLoadProfileByUserIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchLoadProfileByUserIdResponse)
	err := c.cc.Invoke(ctx, UserService_BatchLoadProfileByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	// Fetch a user by ID.
	ResolveQueryUser(context.Context, *ResolveQueryUserRequest) (*ResolveQueryUserResponse, error)
	ResolveQueryUsers(context.Context, *ResolveQueryUsersRequest) (*ResolveQueryUsersResponse, error)
	ResolveQueryNode(context.Context, *ResolveQueryNodeRequest) (*ResolveQueryNodeResponse, error)
	ResolveQuerySearch(context.Context, *ResolveQuerySearchRequest) (*ResolveQuerySearchResponse, error)
	ResolveMutationCreateUser(context.Context, *ResolveMutationCreateUserRequest) (*ResolveMutationCreateUserResponse, error)
	ResolveMutationUpdateUser(context.Context, *ResolveMutationUpdateUserRequest) (*ResolveMutationUpdateUserResponse, error)
	ResolveMutationDeleteUser(context.Context, *ResolveMutationDeleteUserRequest) (*ResolveMutationDeleteUserResponse, error)
	ResolveUserPosts(context.Context, *ResolveUserPostsRequest) (*ResolveUserPostsResponse, error)
	ResolveOrganizationMemberCount(context.Context, *ResolveOrganizationMemberCountRequest) (*ResolveOrganizationMemberCountResponse, error)
	ResolveOrganizationMembers(context.Context, *ResolveOrganizationMembersRequest) (*ResolveOrganizationMembersResponse, error)
	ResolvePostComments(context.Context, *ResolvePostCommentsRequest) (*ResolvePostCommentsResponse, error)
	BatchLoadUserById(context.Context, *BatchLoadUserByIdRequest) (*BatchLoadUserByIdResponse, error)
	BatchLoadUserByEmail(context.Context, *BatchLoadUserByEmailRequest) (*BatchLoadUserByEmailResponse, error)
	BatchLoadOrganizationById(context.Context, *BatchLoadOrganizationByIdRequest) (*BatchLoadOrganizationByIdResponse, error)
	BatchLoadPostById(context.Context, *BatchLoadPostByIdRequest) (*BatchLoadPostByIdResponse, error)
	BatchLoadCommentById(context.Context, *BatchLoadCommentByIdRequest) (*BatchLoadCommentByIdResponse, error)
	BatchLoadProfileByUserId(context.Context, *BatchLoadProfileByUserIdRequest) (*BatchLoadProfileByUserIdResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) ResolveQueryUser(context.Context, *ResolveQueryUserRequest) (*ResolveQueryUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQueryUser not implemented")
}
func (UnimplementedUserServiceServer) ResolveQueryUsers(context.Context, *ResolveQueryUsersRequest) (*ResolveQueryUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQueryUsers not implemented")
}
func (UnimplementedUserServiceServer) ResolveQueryNode(context.Context, *ResolveQueryNodeRequest) (*ResolveQueryNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQueryNode not implemented")
}
func (UnimplementedUserServiceServer) ResolveQuerySearch(context.Context, *ResolveQuerySearchRequest) (*ResolveQuerySearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveQuerySearch not implemented")
}
func (UnimplementedUserServiceServer) ResolveMutationCreateUser(context.Context, *ResolveMutationCreateUserRequest) (*ResolveMutationCreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveMutationCreateUser not implemented")
}
func (UnimplementedUserServiceServer) ResolveMutationUpdateUser(context.Context, *ResolveMutationUpdateUserRequest) (*ResolveMutationUpdateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveMutationUpdateUser not implemented")
}
func (UnimplementedUserServiceServer) ResolveMutationDeleteUser(context.Context, *ResolveMutationDeleteUserRequest) (*ResolveMutationDeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveMutationDeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ResolveUserPosts(context.Context, *ResolveUserPostsRequest) (*ResolveUserPostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveUserPosts not implemented")
}
func (UnimplementedUserServiceServer) ResolveOrganizationMemberCount(context.Context, *ResolveOrganizationMemberCountRequest) (*ResolveOrganizationMemberCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveOrganizationMemberCount not implemented")
}
func (UnimplementedUserServiceServer) ResolveOrganizationMembers(context.Context, *ResolveOrganizationMembersRequest) (*ResolveOrganizationMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveOrganizationMembers not implemented")
}
func (UnimplementedUserServiceServer) ResolvePostComments(context.Context, *ResolvePostCommentsRequest) (*ResolvePostCommentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolvePostComments not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadUserById(context.Context, *BatchLoadUserByIdRequest) (*BatchLoadUserByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadUserById not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadUserByEmail(context.Context, *BatchLoadUserByEmailRequest) (*BatchLoadUserByEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadUserByEmail not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadOrganizationById(context.Context, *BatchLoadOrganizationByIdRequest) (*BatchLoadOrganizationByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadOrganizationById not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadPostById(context.Context, *BatchLoadPostByIdRequest) (*BatchLoadPostByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadPostById not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadCommentById(context.Context, *BatchLoadCommentByIdRequest) (*BatchLoadCommentByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadCommentById not implemented")
}
func (UnimplementedUserServiceServer) BatchLoadProfileByUserId(context.Context, *BatchLoadProfileByUserIdRequest) (*BatchLoadProfileByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchLoadProfileByUserId not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_ResolveQueryUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveQueryUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveQueryUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveQueryUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveQueryUser(ctx, req.(*ResolveQueryUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveQueryUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveQueryUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveQueryUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveQueryUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveQueryUsers(ctx, req.(*ResolveQueryUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveQueryNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveQueryNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveQueryNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveQueryNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveQueryNode(ctx, req.(*ResolveQueryNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveQuerySearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveQuerySearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveQuerySearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveQuerySearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveQuerySearch(ctx, req.(*ResolveQuerySearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveMutationCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveMutationCreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveMutationCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveMutationCreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveMutationCreateUser(ctx, req.(*ResolveMutationCreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveMutationUpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveMutationUpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveMutationUpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveMutationUpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveMutationUpdateUser(ctx, req.(*ResolveMutationUpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveMutationDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveMutationDeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveMutationDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveMutationDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveMutationDeleteUser(ctx, req.(*ResolveMutationDeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveUserPosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveUserPostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveUserPosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveUserPosts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveUserPosts(ctx, req.(*ResolveUserPostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveOrganizationMemberCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveOrganizationMemberCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveOrganizationMemberCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveOrganizationMemberCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveOrganizationMemberCount(ctx, req.(*ResolveOrganizationMemberCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolveOrganizationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveOrganizationMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolveOrganizationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolveOrganizationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolveOrganizationMembers(ctx, req.(*ResolveOrganizationMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ResolvePostComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolvePostCommentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ResolvePostComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_ResolvePostComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ResolvePostComments(ctx, req.(*ResolvePostCommentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadUserById(ctx, req.(*BatchLoadUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadUserByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadUserByEmail(ctx, req.(*BatchLoadUserByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadOrganizationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadOrganizationByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadOrganizationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadOrganizationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadOrganizationById(ctx, req.(*BatchLoadOrganizationByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadPostById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadPostByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadPostById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadPostById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadPostById(ctx, req.(*BatchLoadPostByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadCommentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadCommentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadCommentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadCommentById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadCommentById(ctx, req.(*BatchLoadCommentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchLoadProfileByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchLoadProfileByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchLoadProfileByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_BatchLoadProfileByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchLoadProfileByUserId(ctx, req.(*BatchLoadProfileByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "simple.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResolveQueryUser",
			Handler:    _UserService_ResolveQueryUser_Handler,
		},
		{
			MethodName: "ResolveQueryUsers",
			Handler:    _UserService_ResolveQueryUsers_Handler,
		},
		{
			MethodName: "ResolveQueryNode",
			Handler:    _UserService_ResolveQueryNode_Handler,
		},
		{
			MethodName: "ResolveQuerySearch",
			Handler:    _UserService_ResolveQuerySearch_Handler,
		},
		{
			MethodName: "ResolveMutationCreateUser",
			Handler:    _UserService_ResolveMutationCreateUser_Handler,
		},
		{
			MethodName: "ResolveMutationUpdateUser",
			Handler:    _UserService_ResolveMutationUpdateUser_Handler,
		},
		{
			MethodName: "ResolveMutationDeleteUser",
			Handler:    _UserService_ResolveMutationDeleteUser_Handler,
		},
		{
			MethodName: "ResolveUserPosts",
			Handler:    _UserService_ResolveUserPosts_Handler,
		},
		{
			MethodName: "ResolveOrganizationMemberCount",
			Handler:    _UserService_ResolveOrganizationMemberCount_Handler,
		},
		{
			MethodName: "ResolveOrganizationMembers",
			Handler:    _UserService_ResolveOrganizationMembers_Handler,
		},
		{
			MethodName: "ResolvePostComments",
			Handler:    _UserService_ResolvePostComments_Handler,
		},
		{
			MethodName: "BatchLoadUserById",
			Handler:    _UserService_BatchLoadUserById_Handler,
		},
		{
			MethodName: "BatchLoadUserByEmail",
			Handler:    _UserService_BatchLoadUserByEmail_Handler,
		},
		{
			MethodName: "BatchLoadOrganizationById",
			Handler:    _UserService_BatchLoadOrganizationById_Handler,
		},
		{
			MethodName: "BatchLoadPostById",
			Handler:    _UserService_BatchLoadPostById_Handler,
		},
		{
			MethodName: "BatchLoadCommentById",
			Handler:    _UserService_BatchLoadCommentById_Handler,
		},
		{
			MethodName: "BatchLoadProfileByUserId",
			Handler:    _UserService_BatchLoadProfileByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
